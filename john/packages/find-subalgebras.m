(* ::Package:: *)

(*
subalg[clusters_][type_]:= lists all subalgebras of `type` wholly contained in `clusters`.

subpoly[clusters_][type_]:= lists all subpolytopes of `type` wholly contained in
the Stasheff polytope of `clusters`.

It is important to distinguish between subalgebras and subpolytopes, as the same 
subalgebra can 'generate' multiple distinct subpolytopes. For example, x1->x2 is clearly an
A2 subalgebra of x1->x2->x3->x4. However there is not a unique pentagon of the A4 Stasheff 
polytope associated with this A2. Instead, there are two: the one from mutating at nodes 1 
and 2 of the seed x1->x2->x3->x4, and the one from mutating at nodes 1 and 2 of the 
cluster x1->x2->x3(1+x4)->1/x4. (Using the notation described below, these pentagons are 
labeled by ()[12] and (4)[12], respectively).  

Therefore subalg is a subset of subpoly. I have chosen the representative of each 
equivalence class simply by Sort[]-ing and then taking the first element. Hopefully we 
can use this as the canonical notation for labeling subalgebras. 

Acceptable `type`s are: a2, a1a1, etc... no need to enter them as strings.

Important: in all of the code that follows it is necessary that clusters come with coords. 

Subalgebras/polytopes are written at the end of a coord, for example {1,2,3,a2a2[4,2]}.

Note that subalgebras generated from the origin, i.e. coord {}, will look a little funny. 
For example, in x1->x2->x3, the A1 x A1 generated by x1 and x3 is written as {a1a1[1,3]}.

For the purpose of writing emails and in papers I propose the notation (coord)[subalg]:

(123)[25] is an A2 subalgebra starting at coord (123) and generated by nodes 2 & 5
(123)[25,43] is an A2 x A2 subalgebra starting at coord (123) with A2's 2->5 and 4->3

For Dn algebras we'll use a '/' to delineate the 'A(n-2)' portion from  the 'prongs', 
e.g. (123)[61/24] for the D4 subalgebra with 6->1,1->2,1->4.

*)


(*subsCanonSeeded[cluster_][algSeed_]:= finds subsets of `cluster` that are in the 'canonical' form
of a subalgebra of type `algSeed` ('canonical' form means x1->x2->x3 or x2->x3->x1 but not x1<-x2->x3.*)
subsCanonSeeded[cluster_][algSeed_]:=Module[{xs,b,subIndicesTotal,subMatrices,posGood,subIndicesGood,ret},
xs=cluster[[1]];
b=cluster[[2]];
subIndicesTotal=Flatten[Permutations/@Subsets[Range[Length[xs]],{Length[algSeed[[1]]]}],1];
subMatrices=(f@@@({#,#}&/@subIndicesTotal))/.f[a__]:>b[[a]];
posGood=Position[subMatrices,algSeed[[2]]];
subIndicesGood=subIndicesTotal[[#]]&/@Flatten[posGood];
ret=#[[1]]&/@Gather[xs[[#]]&/@subIndicesGood,Sort[#1]==Sort[#2]&];
Return[ret];];

(*algOfRank[[i]] gives a list of algebras of rank i*)
algOfRank={{"a1"},{"a2","a1a1"},{"a3","a2a1","a1a1a1"},{"d4","a4","a3a1","a2a2","a2a1a1","a1a1a1a1"},{"d5","a5","d4a1","a4a1","a3a2","a3a1a1","a2a2a1","a2a1a1a1","a1a1a1a1a1"}};

(*subsCanon[cluster_][type_]:= finds subsets of `cluster` that are in the 'canonical' form
of a subalgebra of `rank`.*)
subsCanon[cluster_][type_]:={type,subsCanonSeeded[cluster][ToExpression[ToString[type]<>"Seed"]]};

(*fullSubStructure contains a list of subpolytopes grouped in to equivalence classes (i.e. when multiple subpolytopes correspond to the same subalgebra). a note on speed: for everything <E6 this code is pretty quick (<1sec), but for E6 each type takes 5-20sec. I think this is mostly unavoidable, as E6 is very complicated, but perhaps there are significant speed improvements to be made.*)
fullSubStructure[clusters_][type_]:=fullSubStructure[clusters][type]=Module[{groups,numReplace1,numReplace2,numEval1,numEval2,base},
numReplace1=Thread[{x1,x2,x3,x4,x5,x6}->(Prime/@Range[6])];
numReplace2=Thread[{x1,x2,x3,x4,x5,x6}->(Prime/@(Range[6]+6))];
numEval1[a_String[x__]]:=Union[ToExpression[a<>"Xs"]@@({x}/.numReplace1)];
numEval2[a_String[x__]]:=Union[ToExpression[a<>"Xs"]@@({x}/.numReplace2)];
base=Union[Flatten[(ToString[#[[1]]]@@@#[[2]]&/@{subsCanon[#][type]})&/@clusters]];
groups=#[[1]]&/@#&/@Gather[{#,numEval1[#],numEval2[#]}&/@base,#1[[2;;3]]==#2[[2;;3]]&];
Return[(Sort[Sort/@(#/.a_String[x__]:>(With[{tmp=clusters[[#]]},Append[tmp[[3]],a@@(Position[tmp[[1]],#,1][[1,1]]&/@{x})]]&/@(Intersection@@(#[[1]]&/@Position[clusters,#,3]&/@{x}))))][[1]]&/@groups)];];

(*finally we have what we came for*)
subpoly[clusters_][type_]:=Flatten[fullSubStructure[clusters][type],1];
subalg[clusters_][type_]:=#[[1]]&/@fullSubStructure[clusters][type];
